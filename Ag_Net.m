function net2 = Ag_Net
rng(0)
%% 3 layers
numf=64;
filter_size = 3;
b_min = 0.025;
num_channels = 9;
lr11  = [1 1];
lr10  = [1 0];
weightDecay = [1 0];
meanvar  =  [zeros(numf,1,'single'), 0.01*ones(numf,1,'single')];

% Define network
net.layers = {} ;


net.layers{end+1} = struct('type', 'conv', ...
    'weights', {{sqrt(2/(9*numf))*randn(filter_size,filter_size,num_channels,numf,'single'), zeros(numf,1,'single')}}, ...
    'stride', 1, ...
    'pad', 1, ...
    'dilate',1, ...
    'learningRate',lr11, ...
    'weightDecay',weightDecay, ...
    'opts',{{}}) ;
net.layers{end+1} = struct('type', 'relu','leak',0) ;


net.layers{end+1} = struct('type', 'conv', ...
    'weights', {{sqrt(2/(9*numf))*randn(filter_size,filter_size,numf,numf,'single'), zeros(numf,1,'single')}}, ...
    'stride', 1, ...
    'learningRate',lr10, ...
    'dilate',1, ...
    'weightDecay',weightDecay, ...
    'pad', 1, 'opts', {{}}) ;

net.layers{end+1} = struct('type', 'bnorm', ...
    'weights', {{clipping(sqrt(2/(9*numf))*randn(numf,1,'single'),b_min), zeros(numf,1,'single'),meanvar}}, ...
    'learningRate', [1 1 1], ...
    'weightDecay', [0 0], ...
    'opts', {{}}) ;
net.layers{end+1} = struct('type', 'relu','leak',0) ;


net.layers{end+1} = struct('type', 'conv', ...
    'weights', {{sqrt(2/(9*numf))*randn(filter_size,filter_size,numf,1,'single'), zeros(1,1,'single')}}, ...
    'stride', 1, ...
    'learningRate',lr11, ...
    'dilate',1, ...
    'weightDecay',weightDecay, ...
    'pad', 1, 'opts', {{}}) ;

net.layers{end+1} = struct('type', 'loss') ; % make sure the new 'vl_nnloss.m' is in the same folder.

% Fill in default values
net2 = vl_simplenn_tidy(net);



function A = clipping(A,b)
A(A>=0&A<b) = b;
A(A<0&A>-b) = -b;